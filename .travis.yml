# Copyright (c) 2012-2020 Sebastien Rombauts (sebastien.rombauts@gmail.com)

language: cpp
sudo: false

# Use Linux unless specified otherwise
os: linux

cache:
  apt: true

matrix:
  include:

    ##########################################################################
    # GCC on Linux
    ##########################################################################

    - dist: bionic
      env:
        - cc=gcc
        - cxx=g++
        - CXXFLAGS=""
        - COVERALLS=true
      

    - dist: xenial
      env:
        - cc=gcc
        - cxx=g++
        - CXXFLAGS=""

    - dist: trusty
      env:
        - cc=gcc
        - cxx=g++
        - CXXFLAGS=""

    ##########################################################################
    # Clang on Linux
    ##########################################################################

    - dist: bionic
      env:
        - cc=clang
        - cxx=clang++
        - CXXFLAGS=""

    - dist: xenial
      env:
        - cc=clang
        - cxx=clang++
        - CXXFLAGS=""

    - dist: trusty
      env:
        - cc=clang
        - cxx=clang++
        - CXXFLAGS=""      

    ##########################################################################
    # Clang on OSX
    ##########################################################################

    # Latest XCode
    - os: osx
      env:
        - cc=clang
        - cxx=clang++
        - CXXFLAGS=""

    # XCode 8.3
    - os: osx
      osx_image: xcode8.3
      env:
        - cc=clang
        - cxx=clang++
        - CXXFLAGS=""

before_install:
  # Set the compiler environment variables properly
  - export CC=${cc}
  - export CXX=${cxx}
  - ${CC} --version
  - ${CXX} --version

install:
  # coveralls test coverage:
  - if [[ "$COVERALLS" == "true" ]]; then pip install --user cpp-coveralls ; fi

# scripts to run before build
before_script:
  - mkdir build
  - cd build
  - cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=Debug -DSQLITECPP_USE_ASAN=ON -DSQLITECPP_USE_GCOV=ON -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON ..

# build examples, and run tests (ie make & make test)
script:
  - cmake --build .
  - export ASAN_OPTIONS=verbosity=1:debug=1
  - ctest --verbose --output-on-failure

# generate and publish GCov coveralls results
after_success:
  - if [[ "$COVERALLS" == "true" ]]; then coveralls --root .. -e examples -e googletest -e sqlite3 -e tests -E ".*feature_tests.*" -E ".*CompilerId.*" --gcov-options '\-lp' ; fi
